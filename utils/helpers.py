"""
–£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è VKinder Bot
"""

import logging
import re
import json
import asyncio
from typing import Any, Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from functools import wraps
import aiohttp
import asyncpg
from dataclasses import asdict, is_dataclass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class VKinderError(Exception):
    """–ë–∞–∑–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è VKinder Bot"""
    pass


class VKAPIError(VKinderError):
    """–û—à–∏–±–∫–∞ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    pass


class DatabaseError(VKinderError):
    """–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass


class ValidationError(VKinderError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass


# –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –≠—Ç–∏ –∫–ª–∞—Å—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ handlers.state_handler
class _UserState:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è UserState"""
    MAIN_MENU = "main_menu"


class _StateData:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è StateData"""
    def __init__(self, current_state=None):
        self.current_state = current_state


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
UserState = _UserState()
StateData = _StateData


def async_retry(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            attempts = 0
            current_delay = delay
            
            while attempts < max_attempts:
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    attempts += 1
                    if attempts == max_attempts:
                        logger.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        raise
                    
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {current_delay}—Å")
                    await asyncio.sleep(current_delay)
                    current_delay *= backoff

        return wrapper
    return decorator


def async_retry_method(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(self, *args, **kwargs):
            attempts = 0
            current_delay = delay
            
            while attempts < max_attempts:
                try:
                    return await func(self, *args, **kwargs)
                except Exception as e:
                    attempts += 1
                    if attempts == max_attempts:
                        logger.error(f"–ú–µ—Ç–æ–¥ {func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        raise
                    
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –º–µ—Ç–æ–¥–∞ {func.__name__} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {current_delay}—Å")
                    await asyncio.sleep(current_delay)
                    current_delay *= backoff

        return wrapper
    return decorator


def validate_vk_user_id(user_id: Any) -> int:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    """
    try:
        user_id_int = int(user_id)
        if user_id_int <= 0:
            raise ValidationError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return user_id_int
    except (ValueError, TypeError):
        raise ValidationError(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {user_id}")


def validate_age(age: Any) -> int:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        age_int = int(age)
        if not (16 <= age_int <= 100):
            raise ValidationError(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 100 –ª–µ—Ç: {age}")
        return age_int
    except (ValueError, TypeError):
        raise ValidationError(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {age}")


def validate_city(city: str) -> str:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    """
    if not city or not isinstance(city, str):
        raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

    city_clean = city.strip()
    if len(city_clean) < 2:
        raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")

    if len(city_clean) > 100:
        raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")

    if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-\.]+$', city_clean):
        raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")

    return city_clean


def validate_sex(sex: Any) -> int:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        sex_int = int(sex)
        if sex_int not in (0, 1, 2):
            raise ValidationError(f"–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, 1 –∏–ª–∏ 2: {sex}")
        return sex_int
    except (ValueError, TypeError):
        raise ValidationError(f"–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {sex}")


def parse_vk_date(bdate: Optional[str]) -> Optional[Tuple[int, int, int]]:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    """
    if not bdate:
        return None

    try:
        parts = bdate.split('.')
        if len(parts) >= 2:
            day = int(parts[0])
            month = int(parts[1])
            year = int(parts[2]) if len(parts) == 3 else None
            
            if year:
                return (year, month, day)
    except (ValueError, IndexError):
        pass

    return None


def calculate_age(bdate: Optional[str]) -> Optional[int]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    """
    date_parts = parse_vk_date(bdate)
    if not date_parts or len(date_parts) != 3:
        return None
    
    birth_year, birth_month, birth_day = date_parts
    today = datetime.now()

    age = today.year - birth_year
    if (today.month, today.day) < (birth_month, birth_day):
        age -= 1

    return age


def format_user_profile(user_data: Dict[str, Any], photos: List[Tuple[str, int]]) -> Tuple[str, str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    first_name = user_data.get('first_name', '')
    last_name = user_data.get('last_name', '')
    profile_link = user_data.get('profile_link', '')

    message = (
        f"üë§ {first_name} {last_name}\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
        f"üì∏ –¢–æ–ø-{len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:"
    )

    attachment = ','.join([photo[0] for photo in photos])

    return message, attachment


def format_favorites_list(favorites: List[Tuple]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    if not favorites:
        return "üìù –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç"

    message = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:\n\n"
    for i, (vk_id, first_name, last_name, profile_link) in enumerate(favorites, 1):
        message += f"{i}. {first_name} {last_name}\nüîó {profile_link}\n\n"

    return message.strip()


def create_profile_link(vk_id: int, domain: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    """
    if domain and domain != f"id{vk_id}":
        return f"https://vk.com/{domain}"
    else:
        return f"https://vk.com/id{vk_id}"


def chunk_list(lst: List[Any], chunk_size: int) -> List[List[Any]]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ chunks —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    """
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]


async def safe_json_request(url: str, params: Dict[str, Any],
                            session: aiohttp.ClientSession,
                            timeout: int = 30) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç JSON –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        async with session.get(url, params=params, timeout=timeout) as response:
            if response.status != 200:
                raise VKAPIError(f"HTTP error {response.status}: {await response.text()}")
            
            data = await response.json()
            if 'error' in data:
                error_msg = data['error'].get('error_msg', 'Unknown VK error')
                raise VKAPIError(f"VK API error: {error_msg}")

            return data

    except asyncio.TimeoutError:
        raise VKAPIError("Request timeout")
    except aiohttp.ClientError as e:
        raise VKAPIError(f"Network error: {e}")
    except json.JSONDecodeError as e:
        raise VKAPIError(f"JSON decode error: {e}")


async def safe_close(connection: Any) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if hasattr(connection, 'close'):
            if hasattr(connection.close, '__call__'):
                if hasattr(connection.close, '__await__'):
                    await connection.close()
                else:
                    connection.close()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


def dataclass_to_dict(obj: Any) -> Dict[str, Any]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç dataclass –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
    """
    if is_dataclass(obj):
        return asdict(obj)
    elif hasattr(obj, '__dict__'):
        return obj.__dict__
    else:
        raise ValueError("Object is not a dataclass or doesn't have __dict__")


def format_timedelta(delta: timedelta) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    """
    total_seconds = int(delta.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    if hours > 0:
        return f"{hours}—á {minutes}–º"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"


class RateLimiter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    def __init__(self, max_requests: int, period: float):
        self.max_requests = max_requests
        self.period = period
        self.requests = []
        self.lock = asyncio.Lock()

    async def acquire(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        async with self.lock:
            now = datetime.now()

            self.requests = [req_time for req_time in self.requests
                             if (now - req_time).total_seconds() < self.period]

            if len(self.requests) >= self.max_requests:
                oldest_request = self.requests[0]
                wait_time = self.period - (now - oldest_request).total_seconds()
                await asyncio.sleep(wait_time)

                now = datetime.now()
                self.requests = [req_time for req_time in self.requests
                                 if (now - req_time).total_seconds() < self.period]

            self.requests.append(now)


class DatabaseConnectionPool:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    def __init__(self, dsn: str, max_size: int = 10):
        self.dsn = dsn
        self.max_size = max_size
        self.pool = None
        self._lock = asyncio.Lock()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.pool is None:
            async with self._lock:
                if self.pool is None:
                    self.pool = await asyncpg.create_pool(
                        dsn=self.dsn,
                        min_size=1,
                        max_size=self.max_size,
                        command_timeout=60
                    )

    async def acquire(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
        if self.pool is None:
            await self.initialize()
        return await self.pool.acquire()

    async def release(self, connection):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª"""
        if self.pool:
            await self.pool.release(connection)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.pool:
            await self.pool.close()
            self.pool = None


def setup_logging(level: str = "INFO", log_file: Optional[str] = None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    log_level = getattr(logging, level.upper(), logging.INFO)

    handlers = [logging.StreamHandler()]
    if log_file:
        handlers.append(logging.FileHandler(log_file, encoding='utf-8'))

    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=handlers
    )


def with_error_handling(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except VKAPIError as e:
            logger.error(f"VK API Error in {func.__name__}: {e}")
            raise
        except DatabaseError as e:
            logger.error(f"Database Error in {func.__name__}: {e}")
            raise
        except ValidationError as e:
            logger.warning(f"Validation Error in {func.__name__}: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected Error in {func.__name__}: {e}")
            raise

    return wrapper

# –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é recover_state, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


async def recover_user_state(user_id: int, state_handler: Any) -> Any:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ (–æ–±—â–∞—è –≤–µ—Ä—Å–∏—è)
    """
    try:
        if hasattr(state_handler, 'get_user_state'):
            state_data = await state_handler.get_user_state(user_id)
            return state_data
        return None
    except Exception as e:
        logger.error(f"Error recovering state for user {user_id}: {e}")
        return None


# –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
validate_vk_id = validate_vk_user_id
format_profile = format_user_profile
format_favorites = format_favorites_list
