"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏–∑ schema.sql
"""

import psycopg2
import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class DatabaseInitializer:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
        load_dotenv()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
        self.db_params = {
            'dbname': os.getenv('DB_NAME', 'vkinder_bot_vk'),
            'user': os.getenv('DB_USER', 'vkinder_bot_vk_admin'),
            'password': os.getenv('DB_PASSWORD', ''),
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': os.getenv('DB_PORT', '5432')
        }
        
        self.schema_file = Path('database/schema.sql')
    
    def read_schema_file(self):
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å—Ö–µ–º—ã –ë–î"""
        if not self.schema_file.exists():
            logger.error(f"–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.schema_file}")
            return None
            
        try:
            with open(self.schema_file, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ö–µ–º—ã: {e}")
            return None
    
    def initialize_schema(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –∏–∑ schema.sql"""
        schema_sql = self.read_schema_file()
        if not schema_sql:
            return False
        
        try:
            conn = psycopg2.connect(**self.db_params)
            conn.autocommit = True
            cur = conn.cursor()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∏–∑ —Ñ–∞–π–ª–∞ —Å—Ö–µ–º—ã
            cur.execute(schema_sql)
            
            conn.close()
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
            return False
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn = psycopg2.connect(**self.db_params)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã
            with conn.cursor() as cur:
                cur.execute("SELECT version()")
                result = cur.fetchone()
                logger.info(f"–í–µ—Ä—Å–∏—è PostgreSQL: {result[0]}")
            
            conn.close()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VKinder Bot")
        print("="*50)
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞:")
        print(f"DB: {self.db_params['dbname']}")
        print(f"User: {self.db_params['user']}")
        print(f"Host: {self.db_params['host']}")
        print(f"Port: {self.db_params['port']}")
        print("="*50)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.test_connection():
            return False
        
        # –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        if not self.initialize_schema():
            return False
        
        print("\nüéâ –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!")
        print("="*50)
        return True

if __name__ == "__main__":
    initializer = DatabaseInitializer()
    success = initializer.run()
    sys.exit(0 if success else 1)