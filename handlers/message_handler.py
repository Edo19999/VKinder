import logging
import json
from typing import Dict, Any, Optional
from .state_handler import StateHandler
from .models import StateData, UserState
from services.service_factory import ServiceFactory

from services.service_factory import ServiceFactory
from keyboards.keyboard_manager import KeyboardManager
from utils import format_user_profile, format_favorites_list
from utils import async_retry, ValidationError

logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self):
        self.user_service = ServiceFactory.get_user_service()
        self.search_service = ServiceFactory.get_search_service()
        self.state_handler = StateHandler(
            ServiceFactory.get_db_repository(),
            ServiceFactory.get_vk_service()
        )
        self.keyboard_manager = KeyboardManager()
        self.current_matches: Dict[int, Dict[str, Any]] = {}
        self.favorite_service = ServiceFactory.get_favorite_service()
        
    async def handle_message(self, message: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_id = message.get('from_id')
            message_text = message.get('text', '')
            payload = message.get('payload')
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: user_id={user_id}, text={message_text}, payload={payload}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π payload
            if payload:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω payload: {payload}")
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ payload
            command = None
            if payload:
                command = self._parse_command(payload)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ payload: {command}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state_data = await self.state_handler.get_user_state(user_id)
            logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_state_data}")
            
            if command:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: {command}")
                await self._handle_command(user_id, command, payload)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_state = user_state_data.current_state.name if user_state_data and user_state_data.current_state else 'MAIN_MENU'
                logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞): {current_state}")
                
                if current_state == 'SETTING_AGE':
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞: {message_text}")
                    await self._process_age_input(user_id, message_text)
                elif current_state == 'SETTING_CITY':
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞: {message_text}")
                    await self._process_city_input(user_id, message_text)
                else:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                    await self._handle_text_message(user_id, message_text)
                
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await self.user_service.vk_service.send_message(
                user_id, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
    
    def _parse_command(self, payload: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ payload"""
        try:
            if not payload:
                return None
                
            payload_data = json.loads(payload)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
            if 'sex' in payload_data:
                self.sex_value = payload_data.get('sex')
                return 'sex_selected'  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ payload
            command = payload_data.get('command')
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ payload: {command}")
            return command
        except (json.JSONDecodeError, TypeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ payload: {e}, payload: {payload}")
            return None

    async def _handle_command(self, user_id: int, command: str, payload: str = None) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ payload"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
        payload_data = {}
        if payload:
            try:
                payload_data = json.loads(payload)
            except json.JSONDecodeError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å payload: {payload}")
        
        command_handlers = {
            'search': self._handle_search,
            'next': self._handle_next,
            'add_favorite': self._handle_add_favorite,
            'favorites': self._handle_favorites,
            'main_menu': self._handle_main_menu,
            'age': self._handle_age,
            'city': self._handle_city,
            'sex': self._handle_sex,
            'sex_selected': self._handle_sex_selected,
            'preferred_sex': self._handle_preferred_sex,
            'preferred_sex_selected': self._handle_preferred_sex_selected,
            'age_selected': self._handle_age_selected,
            'city_selected': self._handle_city_selected,
            'city_input': self._handle_city_input,
            'back': self._handle_main_menu,
            'like': self._handle_like,
            'dislike': self._handle_dislike,
            'blacklist': self._handle_blacklist,
            'skip': self._handle_skip,
            'add_to_favorites': self._handle_add_to_favorites,
            'edit_profile': self._handle_edit_profile
        }
        
        handler = command_handlers.get(command)
        if handler:
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}")
            if command in ['age_selected', 'city_selected', 'city_input', 'sex_selected', 'preferred_sex_selected']:
                await handler(user_id, payload_data)
            else:
                await handler(user_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            await self._handle_main_menu(user_id)

    async def _handle_text_message(self, user_id: int, message: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = message.lower().strip()
        
        if message in ['–Ω–∞—á–∞—Ç—å', 'start', '–º–µ–Ω—é', '–≥–ª–∞–≤–Ω–æ–µ', 'üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            await self._handle_main_menu(user_id)
        elif message in ['–ø–æ–∏—Å–∫', '–Ω–∞–π—Ç–∏', '–∏—Å–∫–∞—Ç—å', 'üîç –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞']:
            await self._handle_search(user_id)
        elif message in ['–¥–∞–ª–µ–µ', '—Å–ª–µ–¥—É—é—â–∏–π', '‚û°Ô∏è —Å–ª–µ–¥—É—é—â–∏–π']:
            await self._handle_next(user_id)
        elif message in ['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–∏–∑–±—Ä–∞–Ω–Ω—ã–µ', '‚≠ê –∏–∑–±—Ä–∞–Ω–Ω—ã–µ']:
            await self._handle_favorites(user_id)
        elif message in ['–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–¥–æ–±–∞–≤–∏—Ç—å', '‚ù§Ô∏è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ']:
            await self._handle_add_favorite(user_id)
            await self._handle_favorites(user_id)
        else:
            await self._handle_main_menu(user_id)

    async def _handle_main_menu(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ üîç –ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"
        )
        
        await self.user_service.vk_service.send_message(
            user_id,
            welcome_text,
            self.keyboard_manager.create_main_keyboard(inline=True)
        )
        self.user_service.update_user_state(user_id, 'main_menu')

    async def _handle_search(self, user_id: int) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.user_service.process_user(user_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        
        if not user_info:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: age={user_info.age}, city={user_info.city}, sex={user_info.sex}, preferred_sex={getattr(user_info, 'preferred_sex', None)}")
        
        if not user_info.age or not user_info.city or not user_info.sex:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞")
            missing_fields = []
            if not user_info.age:
                missing_fields.append("‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
            if not user_info.city:
                missing_fields.append("‚Ä¢ –ì–æ—Ä–æ–¥")
            if not user_info.sex:
                missing_fields.append("‚Ä¢ –ü–æ–ª")
            
            await self.user_service.vk_service.send_message(
                user_id,
                f"üìù –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:\n\n{chr(10).join(missing_fields)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å:",
                self.keyboard_manager.create_profile_setup_keyboard(inline=True)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        preferred_sex = getattr(user_info, 'preferred_sex', None)
        if preferred_sex is None:
            await self.user_service.vk_service.send_message(
                user_id,
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
            
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await self._show_next_match(user_id, user_info)

    async def _handle_next(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_info = self.user_service.process_user(user_id)
        if user_info:
            await self._show_next_match(user_id, user_info)

    async def _handle_add_favorite(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if user_id in self.current_matches:
            match_data = self.current_matches[user_id]
            favorite_id = match_data['user'].vk_id
            
            success = self.user_service.add_to_favorites(user_id, favorite_id)
            if success:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    self.keyboard_manager.create_search_keyboard(inline=True)
                )
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    self.keyboard_manager.create_search_keyboard(inline=True)
                )
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )

    async def _handle_favorites(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        favorites = self.user_service.get_favorites_list(user_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ helpers –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = format_favorites_list(favorites)
        
        await self.user_service.vk_service.send_message(
            user_id,
            message,
            self.keyboard_manager.create_favorites_keyboard(inline=True)
        )

    async def _handle_add_to_favorites(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if user_id in self.current_matches:
            match_data = self.current_matches[user_id]
            favorite_id = match_data['user']['vk_id']
            
            success = self.user_service.add_to_favorites(user_id, favorite_id)
            if success:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    self.keyboard_manager.create_search_keyboard(inline=True)
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = self.user_service.process_user(user_id)
                await self._show_next_match(user_id, user_info)
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.",
                    self.keyboard_manager.create_search_keyboard(inline=True)
                )
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )

    async def _handle_age(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        keyboard = self.keyboard_manager.create_age_selection_keyboard()
        await self.user_service.vk_service.send_message(
            user_id,
            "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
            keyboard=keyboard
        )
        
    async def _handle_city(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞"""
        keyboard = self.keyboard_manager.create_city_selection_keyboard()
        await self.user_service.vk_service.send_message(
            user_id,
            "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
            keyboard=keyboard
        )
        
    async def _handle_sex(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∞"""
        await self.user_service.vk_service.send_message(
            user_id,
            "üë´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            self.keyboard_manager.create_sex_selection_keyboard(inline=True)
        )
        self.user_service.update_user_state(user_id, 'setting_sex')
        
    async def _handle_sex_selected(self, user_id: int, payload_data: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            sex_value = payload_data.get('sex')
            if not sex_value:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω sex –≤ payload")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.user_service.process_user(user_id)
            if not user_info:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info.sex = sex_value
            success = self.user_service.db_repository.add_or_update_user(user_info)
            
            if success:
                sex_text = "–º—É–∂—Å–∫–æ–π" if sex_value == 2 else "–∂–µ–Ω—Å–∫–∏–π"
                await self.user_service.vk_service.send_message(
                    user_id,
                    f"‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sex_text}\n\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                self.user_service.update_user_state(user_id, 'main_menu')
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    self.keyboard_manager.create_sex_selection_keyboard(inline=True)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞: {e}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                self.keyboard_manager.create_sex_selection_keyboard(inline=True)
            )

    async def _handle_preferred_sex(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É"""
        await self.user_service.vk_service.send_message(
            user_id,
            "üíï –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            self.keyboard_manager.create_preferred_sex_selection_keyboard(inline=True)
        )
        self.user_service.update_user_state(user_id, 'setting_preferred_sex')
        
    async def _handle_preferred_sex_selected(self, user_id: int, payload_data: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            preferred_sex_value = payload_data.get('preferred_sex')
            if preferred_sex_value is None:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω preferred_sex –≤ payload")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.user_service.process_user(user_id)
            if not user_info:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É
            user_info.preferred_sex = preferred_sex_value
            success = self.user_service.db_repository.add_or_update_user(user_info)
            
            if success:
                if preferred_sex_value == 0:
                    sex_text = "–ª—é–±–æ–π"
                elif preferred_sex_value == 1:
                    sex_text = "–∂–µ–Ω—Å–∫–∏–π"
                else:
                    sex_text = "–º—É–∂—Å–∫–æ–π"
                    
                await self.user_service.vk_service.send_message(
                    user_id,
                    f"‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {sex_text}",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                self.user_service.update_user_state(user_id, 'main_menu')
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    self.keyboard_manager.create_preferred_sex_selection_keyboard(inline=True)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É: {e}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                self.keyboard_manager.create_preferred_sex_selection_keyboard(inline=True)
            )

    async def _process_age_input(self, user_id: int, message: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            age = int(message.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞
            if 18 <= age <= 100:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await self.user_service.process_user(user_id)
                
                if user_info:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_info.age = age
                    success = self.user_service.db_repository.add_or_update_user(user_info)
                    
                    if success:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        await self.state_handler.set_user_state(user_id, StateData(UserState.MAIN_MENU))
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥
                        if not user_info.city:
                            await self.user_service.vk_service.send_message(
                                user_id,
                                f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age} –ª–µ—Ç\n\nüìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
                                self.keyboard_manager.create_profile_setup_keyboard(inline=True)
                            )
                            return
                        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –ø–æ–ª–∞
                        elif not user_info.sex:
                            await self.user_service.vk_service.send_message(
                                user_id,
                                f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age} –ª–µ—Ç\n\nüë§ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                                self.keyboard_manager.create_sex_keyboard(inline=True)
                            )
                            return
                        else:
                            await self.user_service.vk_service.send_message(
                                user_id,
                                f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age} –ª–µ—Ç\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                                self.keyboard_manager.create_main_keyboard(inline=True)
                            )
                            self.user_service.update_user_state(user_id, 'main_menu')
                            return
                    else:
                        await self.user_service.vk_service.send_message(
                            user_id,
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            self.keyboard_manager.create_profile_setup_keyboard(inline=True)
                        )
                else:
                    await self.user_service.vk_service.send_message(
                        user_id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        self.keyboard_manager.create_profile_setup_keyboard(inline=True)
                    )
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    self.keyboard_manager.create_profile_setup_keyboard(inline=True)
                )
                return
        except ValueError:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100):",
                self.keyboard_manager.create_profile_setup_keyboard(inline=True)
            )
            return
            
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –±–ª–æ–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    async def _process_city_input(self, user_id: int, message: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞"""
        city = message.strip()
        
        if len(city) > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.user_service.process_user(user_id)
            
            if user_info:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info.city = city
                success = self.user_service.db_repository.add_or_update_user(user_info)
                
                if success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø–æ–ª
                    if not user_info.sex:
                        await self.user_service.vk_service.send_message(
                            user_id,
                            f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}\n\nüë§ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                            self.keyboard_manager.create_sex_keyboard(inline=True)
                        )
                        self.user_service.update_user_state(user_id, 'main_menu')
                        return
                    else:
                        await self.user_service.vk_service.send_message(
                            user_id,
                            f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                            self.keyboard_manager.create_main_keyboard(inline=True)
                        )
                        self.user_service.update_user_state(user_id, 'main_menu')
                        return
                else:
                    await self.user_service.vk_service.send_message(
                        user_id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        self.keyboard_manager.create_profile_setup_keyboard(inline=True)
                    )
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                self.keyboard_manager.create_profile_setup_keyboard(inline=True)
            )
            return
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.user_service.update_user_state(user_id, 'main_menu')
    
    async def _show_next_match(self, user_id: int, user_info: Any) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º StateData –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        from utils.data_models import StateData, UserState
        
        state_data = StateData(
            current_state=UserState.SEARCHING,
            context={
                'age': user_info.age,
                'city': user_info.city,
                'sex': user_info.sex
            }
        )
        
        match = self.user_service.find_next_match(user_id, user_info)
        
        if not match:
            await self.user_service.vk_service.send_message(
                user_id,
                "üò¢ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
            return
            
        user = match['user']
        photos = match['photos']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ helpers –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message, attachment = format_user_profile(user, photos)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await self.user_service.vk_service.send_message(
            user_id,
            message,
            self.keyboard_manager.create_search_keyboard(inline=True),
            attachment
        )
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.current_matches[user_id] = match
            self.user_service.update_user_state(user_id, 'searching')
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è",
                self.keyboard_manager.create_main_keyboard()
            )

    async def _handle_like(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._handle_rating(user_id, 'like', '‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!')

    async def _handle_dislike(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∑–ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._handle_rating(user_id, 'dislike', 'üëé –î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!')

    async def _handle_blacklist(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        await self._handle_rating(user_id, 'blacklist', 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!')

    async def _handle_skip(self, user_id: int) -> None:
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ—Ü–µ–Ω–∫–∏"""
        if user_id in self.current_matches:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
            user_info = self.user_service.process_user(user_id)
            await self._show_next_match(user_id, user_info)
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )

    async def _handle_rating(self, user_id: int, rating_type: str, success_message: str) -> None:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if user_id not in self.current_matches:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
            return

        current_match = self.current_matches[user_id]
        rated_user_id = current_match['user']['vk_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_repository = ServiceFactory.get_db_repository()
        success = db_repository.add_user_rating(user_id, rated_user_id, rating_type)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await self.user_service.vk_service.send_message(
                user_id,
                success_message,
                None
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = self.user_service.process_user(user_id)
            await self._show_next_match(user_id, user_info)
        else:
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏",
                self.keyboard_manager.create_search_keyboard(inline=True)
            )
    
    async def _handle_age_selected(self, user_id: int, payload_data: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
        try:
            age_range = payload_data.get('age_range')
            if not age_range:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω age_range –≤ payload")
                return
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {age_range}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞
            if age_range == "18-25":
                min_age, max_age = 18, 25
            elif age_range == "26-35":
                min_age, max_age = 26, 35
            elif age_range == "36-45":
                min_age, max_age = 36, 45
            elif age_range == "46+":
                min_age, max_age = 46, 100
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.user_service.process_user(user_id)
            if not user_info:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            user_age = (min_age + max_age) // 2
            user_info.age = user_age
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.user_service.update_user_preferences(
                user_id, 
                min_age=min_age, 
                max_age=max_age
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_success = self.user_service.db_repository.add_or_update_user(user_info)
            success = success and user_success
            
            if success:
                await self.user_service.vk_service.send_message(
                    user_id,
                    f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age_range} –ª–µ—Ç",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
    
    async def _handle_city_selected(self, user_id: int, payload_data: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
        try:
            city = payload_data.get('city')
            if not city:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω city –≤ payload")
                return
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.user_service.update_user_preferences(
                user_id, 
                city=city
            )
            
            if success:
                await self.user_service.vk_service.send_message(
                    user_id,
                    f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
            else:
                await self.user_service.vk_service.send_message(
                    user_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞",
                    self.keyboard_manager.create_main_keyboard(inline=True)
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞: {e}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
    
    async def _handle_city_input(self, user_id: int, payload_data: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
            await self.state_handler.set_user_state(user_id, StateData(UserState.SETTING_CITY))
            
            await self.user_service.vk_service.send_message(
                user_id,
                "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
                self.keyboard_manager.create_empty_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞: {e}")
            await self.user_service.vk_service.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                self.keyboard_manager.create_main_keyboard(inline=True)
            )
    
    async def _handle_edit_profile(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.user_service.process_user(user_id)
        
        if user_info:
            current_info = []
            if user_info.age:
                current_info.append(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_info.age} –ª–µ—Ç")
            if user_info.city:
                current_info.append(f"‚Ä¢ –ì–æ—Ä–æ–¥: {user_info.city}")
            if user_info.sex:
                sex_text = "–º—É–∂—Å–∫–æ–π" if user_info.sex == 2 else "–∂–µ–Ω—Å–∫–∏–π"
                current_info.append(f"‚Ä¢ –ü–æ–ª: {sex_text}")
                
            current_text = "\n".join(current_info) if current_info else "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"
            
            message = (
                "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
                "üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                f"{current_text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            )
        else:
            message = (
                "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:"
            )
            
        await self.user_service.vk_service.send_message(
            user_id,
            message,
            self.keyboard_manager.create_profile_setup_keyboard(inline=True)
        )